#! /usr/bin/env python2

from gnuradio import gr
from gnuradio import uhd
from gnuradio import blocks
from gnuradio import digital
from gnuradio import filter
from gnuradio.filter import firdes

import nuts
import time
import sys
import pmt

from optparse import OptionParser
def parse_options():
    parser = OptionParser()
    parser.add_option("-f","--freq", help="select frequency in Hz [default: %default]", default=145.98e6)
    parser.add_option("-s","--samp_rate", help="select sample rate in Hz [default: %default]", default=2e6)
    parser.add_option("-m","--msg", help="message to be transmitted [default: %default]", default="LA1NGS NGHAM test message")
    parser.add_option("-i","--interval", help="message interval in seconds [default: %default]", default=1)
    parser.add_option("-g","--gain", help="select gain in dB [default: %default]", default=0)

    options, args = parser.parse_args()
    return vars(options)

class uhd_tx_nogui(gr.top_block):
    def __init__(self, options):
        gr.top_block.__init__(self, "uhd_tx_nogui")

        # options
        self.freq = freq = options["freq"]
        self.samp_rate = samp_rate = options["samp_rate"]
        self.message = message = options["msg"]
        self.interval = interval = options["interval"]
        self.gain = gain = options["gain"]

        # variables
        self.sps = sps = 10
        self.ngham_rate = ngham_rate = 9600
        self.len_tag_key = len_tag_key = "packet_len"
        self.data = data = [ord(x) for x in message]
        self.length_tag = length_tag = gr.tag_utils.python_to_tag((0, pmt.intern("packet_len"), pmt.from_long(len(data)), pmt.intern("src")))

        # blocks
        self.src = blocks.vector_source_b(data, True, 1, [length_tag])
        self.head = blocks.head(gr.sizeof_char, len(data))
        self.enc = nuts.ngham_encoder(len_tag_key, printing=True)
        self.gmsk = digital.gmsk_mod(samples_per_symbol=sps, bt=0.35, verbose=False, log=False)
        self.resamp = filter.rational_resampler_ccc(interpolation=int(samp_rate), decimation=int(sps*ngham_rate), taps=None, fractional_bw=None)
        self.sink = blocks.null_sink(gr.sizeof_gr_complex)
        #self.sink = uhd.usrp_sink("", uhd.stream_args(cpu_format="fc32",channels=range(1)))
        #self.sink.set_samp_rate(samp_rate)
        #self.sink.set_center_freq(freq, 0)
        #self.sink.set_gain(gain, 0)

        self.connect(self.src, self.head, self.enc, self.gmsk, self.resamp, self.sink)
        
def main():
    options =  parse_options()
    tb = uhd_tx_nogui(options)
    while True:
        try:
            tb.run()
            time.sleep(float(options["interval"]))
            tb.head.reset()
            tb.wait()
        except KeyboardInterrupt:
            break

    print("exiting...")

if __name__=="__main__":
    main()
